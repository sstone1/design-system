import{j as p}from"./jsx-runtime-CHAcsyq4.js";import{r as u}from"./index-CO9pbFv1.js";import{m as G,u as L,c as W,a as _}from"./DefaultPropsProvider-2af-l9uX.js";import{g as N,a as P,s as S}from"./generateUtilityClasses-HyxggqFg.js";import{t as m,T as A,a as F,b as H}from"./ToggleButton-CfUmts4K.js";import{c as $}from"./capitalize-_axBoSLA.js";function U(t){return u.Children.toArray(t).filter(a=>u.isValidElement(a))}function D(t){return P("MuiToggleButtonGroup",t)}const e=N("MuiToggleButtonGroup",["root","selected","horizontal","vertical","disabled","grouped","groupedHorizontal","groupedVertical","fullWidth","firstButton","lastButton","middleButton"]),O=t=>{const{classes:a,orientation:n,fullWidth:c,disabled:h}=t,g={root:["root",n,c&&"fullWidth"],grouped:["grouped",`grouped${$(n)}`,h&&"disabled"],firstButton:["firstButton"],lastButton:["lastButton"],middleButton:["middleButton"]};return _(g,D,a)},j=S("div",{name:"MuiToggleButtonGroup",slot:"Root",overridesResolver:(t,a)=>{const{ownerState:n}=t;return[{[`& .${e.grouped}`]:a.grouped},{[`& .${e.grouped}`]:a[`grouped${$(n.orientation)}`]},{[`& .${e.firstButton}`]:a.firstButton},{[`& .${e.lastButton}`]:a.lastButton},{[`& .${e.middleButton}`]:a.middleButton},a.root,n.orientation==="vertical"&&a.vertical,n.fullWidth&&a.fullWidth]}})(G(({theme:t})=>({display:"inline-flex",borderRadius:(t.vars||t).shape.borderRadius,variants:[{props:{orientation:"vertical"},style:{flexDirection:"column",[`& .${e.grouped}`]:{[`&.${e.selected} + .${e.grouped}.${e.selected}`]:{borderTop:0,marginTop:0}},[`& .${e.firstButton},& .${e.middleButton}`]:{borderBottomLeftRadius:0,borderBottomRightRadius:0},[`& .${e.lastButton},& .${e.middleButton}`]:{marginTop:-1,borderTop:"1px solid transparent",borderTopLeftRadius:0,borderTopRightRadius:0},[`& .${e.lastButton}.${m.disabled},& .${e.middleButton}.${m.disabled}`]:{borderTop:"1px solid transparent"}}},{props:{fullWidth:!0},style:{width:"100%"}},{props:{orientation:"horizontal"},style:{[`& .${e.grouped}`]:{[`&.${e.selected} + .${e.grouped}.${e.selected}`]:{borderLeft:0,marginLeft:0}},[`& .${e.firstButton},& .${e.middleButton}`]:{borderTopRightRadius:0,borderBottomRightRadius:0},[`& .${e.lastButton},& .${e.middleButton}`]:{marginLeft:-1,borderLeft:"1px solid transparent",borderTopLeftRadius:0,borderBottomLeftRadius:0},[`& .${e.lastButton}.${m.disabled},& .${e.middleButton}.${m.disabled}`]:{borderLeft:"1px solid transparent"}}}]}))),X=u.forwardRef(function(a,n){const c=L({props:a,name:"MuiToggleButtonGroup"}),{children:h,className:g,color:T="standard",disabled:v=!1,exclusive:B=!1,fullWidth:b=!1,onChange:s,orientation:k="horizontal",size:y="medium",value:o,...I}=c,w={...c,disabled:v,fullWidth:b,orientation:k,size:y},r=O(w),C=u.useCallback((i,l)=>{if(!s)return;const d=o&&o.indexOf(l);let f;o&&d>=0?(f=o.slice(),f.splice(d,1)):f=o?o.concat(l):[l],s(i,f)},[s,o]),V=u.useCallback((i,l)=>{s&&s(i,o===l?null:l)},[s,o]),M=u.useMemo(()=>({className:r.grouped,onChange:B?V:C,value:o,size:y,fullWidth:b,color:T,disabled:v}),[r.grouped,B,V,C,o,y,b,T,v]),R=U(h),z=R.length,E=i=>{const l=i===0,d=i===z-1;return l&&d?"":l?r.firstButton:d?r.lastButton:r.middleButton};return p(j,{role:"group",className:W(r.root,g),ref:n,ownerState:w,...I,children:p(A.Provider,{value:M,children:R.map((i,l)=>p(F.Provider,{value:E(l),children:i},l))})})}),q=t=>p(X,{sx:[{"& .MuiToggleButton-root.Mui-disabled":{borderColor:"grey.300",backgroundColor:"grey.100",color:"grey.500","&.Mui-selected":{backgroundColor:"grey.200",color:"grey.700"}}}],...t}),Y=t=>{switch(t){case"small":return .5;case"large":return 1.5;default:return 1}},x=t=>{const a=Y(t.size);return p(H,{...t,sx:[{paddingX:3*a,paddingY:1*a},...Array.isArray(t.sx)?t.sx:[t.sx]]})};try{q.displayName="ToggleButtonGroup",q.__docgenInfo={description:"",displayName:"ToggleButtonGroup",props:{children:{defaultValue:null,description:"The content of the component.",name:"children",required:!1,type:{name:"ReactNode"}},classes:{defaultValue:null,description:"Override or extend the styles applied to the component.",name:"classes",required:!1,type:{name:"Partial<ToggleButtonGroupClasses>"}},color:{defaultValue:{value:"'standard'"},description:`The color of the button when it is selected.
It supports both default and custom theme colors, which can be added as shown in the
[palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).`,name:"color",required:!1,type:{name:"enum",value:[{value:'"success"'},{value:'"info"'},{value:'"warning"'},{value:'"error"'},{value:'"standard"'},{value:'"primary"'},{value:'"secondary"'}]}},exclusive:{defaultValue:{value:"false"},description:"If `true`, only allow one of the child ToggleButton values to be selected.",name:"exclusive",required:!1,type:{name:"boolean"}},disabled:{defaultValue:{value:"false"},description:"If `true`, the component is disabled. This implies that all ToggleButton children will be disabled.",name:"disabled",required:!1,type:{name:"boolean"}},fullWidth:{defaultValue:{value:"false"},description:"If `true`, the button group will take up the full width of its container.",name:"fullWidth",required:!1,type:{name:"boolean"}},onChange:{defaultValue:null,description:"Callback fired when the value changes.\n@param event The event source of the callback.\n@param value of the selected buttons. When `exclusive` is true\nthis is a single value; when false an array of selected values. If no value\nis selected and `exclusive` is true the value is null; when false an empty array.",name:"onChange",required:!1,type:{name:"(event: MouseEvent<HTMLElement, MouseEvent>, value: any) => void"}},orientation:{defaultValue:{value:"'horizontal'"},description:"The component orientation (layout flow direction).",name:"orientation",required:!1,type:{name:"enum",value:[{value:'"horizontal"'},{value:'"vertical"'}]}},size:{defaultValue:{value:"'medium'"},description:"The size of the component.",name:"size",required:!1,type:{name:"enum",value:[{value:'"small"'},{value:'"large"'},{value:'"medium"'}]}},sx:{defaultValue:null,description:"The system prop that allows defining system overrides as well as additional CSS styles.",name:"sx",required:!1,type:{name:"SxProps<Theme>"}},value:{defaultValue:null,description:`The currently selected value within the group or an array of selected
values when \`exclusive\` is false.

The value must have reference equality with the option in order to be selected.`,name:"value",required:!1,type:{name:"any"}},ref:{defaultValue:null,description:"",name:"ref",required:!1,type:{name:"Ref<unknown>"}}}}}catch{}try{x.displayName="ToggleButton",x.__docgenInfo={description:"",displayName:"ToggleButton",props:{children:{defaultValue:null,description:"The content of the component.",name:"children",required:!1,type:{name:"ReactNode"}},classes:{defaultValue:null,description:"Override or extend the styles applied to the component.",name:"classes",required:!1,type:{name:"Partial<ToggleButtonClasses> & Partial<ClassNameMap<never>>"}},color:{defaultValue:{value:"'standard'"},description:`The color of the button when it is in an active state.
It supports both default and custom theme colors, which can be added as shown in the
[palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).`,name:"color",required:!1,type:{name:"enum",value:[{value:'"success"'},{value:'"info"'},{value:'"warning"'},{value:'"error"'},{value:'"standard"'},{value:'"primary"'},{value:'"secondary"'}]}},disabled:{defaultValue:{value:`false
false`},description:"If `true`, the component is disabled.",name:"disabled",required:!1,type:{name:"boolean"}},disableFocusRipple:{defaultValue:{value:"false"},description:"If `true`, the  keyboard focus ripple is disabled.",name:"disableFocusRipple",required:!1,type:{name:"boolean"}},fullWidth:{defaultValue:{value:"false"},description:"If `true`, the button will take up the full width of its container.",name:"fullWidth",required:!1,type:{name:"boolean"}},onChange:{defaultValue:null,description:`Callback fired when the state changes.
@param event The event source of the callback.
@param value of the selected button.`,name:"onChange",required:!1,type:{name:"(event: MouseEvent<HTMLElement, MouseEvent>, value: any) => void"}},onClick:{defaultValue:null,description:`Callback fired when the button is clicked.
@param event The event source of the callback.
@param value of the selected button.`,name:"onClick",required:!1,type:{name:"(event: MouseEvent<HTMLElement, MouseEvent>, value: any) => void"}},selected:{defaultValue:null,description:"If `true`, the button is rendered in an active state.",name:"selected",required:!1,type:{name:"boolean"}},size:{defaultValue:{value:"'medium'"},description:`The size of the component.
The prop defaults to the value inherited from the parent ToggleButtonGroup component.`,name:"size",required:!1,type:{name:"enum",value:[{value:'"small"'},{value:'"large"'},{value:'"medium"'}]}},sx:{defaultValue:null,description:"The system prop that allows defining system overrides as well as additional CSS styles.",name:"sx",required:!1,type:{name:"SxProps<Theme>"}},value:{defaultValue:null,description:`The value to associate with the button when selected in a
ToggleButtonGroup.`,name:"value",required:!0,type:{name:"{}"}},tabIndex:{defaultValue:{value:"0"},description:"",name:"tabIndex",required:!1,type:{name:"number"}},action:{defaultValue:null,description:"A ref for imperative actions.\nIt currently only supports `focusVisible()` action.",name:"action",required:!1,type:{name:"Ref<ButtonBaseActions>"}},centerRipple:{defaultValue:{value:"false"},description:"If `true`, the ripples are centered.\nThey won't start at the cursor interaction position.",name:"centerRipple",required:!1,type:{name:"boolean"}},disableRipple:{defaultValue:{value:"false"},description:"If `true`, the ripple effect is disabled.\n\n⚠️ Without a ripple there is no styling for :focus-visible by default. Be sure\nto highlight the element by applying separate styles with the `.Mui-focusVisible` class.",name:"disableRipple",required:!1,type:{name:"boolean"}},disableTouchRipple:{defaultValue:{value:"false"},description:"If `true`, the touch ripple effect is disabled.",name:"disableTouchRipple",required:!1,type:{name:"boolean"}},focusRipple:{defaultValue:{value:"false"},description:"If `true`, the base button will have a keyboard focus ripple.",name:"focusRipple",required:!1,type:{name:"boolean"}},focusVisibleClassName:{defaultValue:null,description:`This prop can help identify which element has keyboard focus.
The class name will be applied when the element gains the focus through keyboard interaction.
It's a polyfill for the [CSS :focus-visible selector](https://drafts.csswg.org/selectors-4/#the-focus-visible-pseudo).
The rationale for using this feature [is explained here](https://github.com/WICG/focus-visible/blob/HEAD/explainer.md).
A [polyfill can be used](https://github.com/WICG/focus-visible) to apply a \`focus-visible\` class to other components
if needed.`,name:"focusVisibleClassName",required:!1,type:{name:"string"}},LinkComponent:{defaultValue:{value:"'a'"},description:"The component used to render a link when the `href` prop is provided.",name:"LinkComponent",required:!1,type:{name:"ElementType<any, keyof IntrinsicElements>"}},onFocusVisible:{defaultValue:null,description:"Callback fired when the component is focused with a keyboard.\nWe trigger a `onFocus` callback too.",name:"onFocusVisible",required:!1,type:{name:"FocusEventHandler<any>"}},TouchRippleProps:{defaultValue:null,description:"Props applied to the `TouchRipple` element.",name:"TouchRippleProps",required:!1,type:{name:"Partial<TouchRippleProps>"}},touchRippleRef:{defaultValue:null,description:"A ref that points to the `TouchRipple` element.",name:"touchRippleRef",required:!1,type:{name:"Ref<TouchRippleActions>"}},className:{defaultValue:null,description:"",name:"className",required:!1,type:{name:"string"}},style:{defaultValue:null,description:"",name:"style",required:!1,type:{name:"CSSProperties"}},ref:{defaultValue:null,description:"",name:"ref",required:!1,type:{name:"Ref<HTMLButtonElement>"}},component:{defaultValue:null,description:"",name:"component",required:!1,type:{name:"ElementType<any, keyof IntrinsicElements>"}}}}}catch{}export{q as T,x as a};
