import{r as o}from"./index-CO9pbFv1.js";import{c as V,a as R}from"./DefaultPropsProvider-Qc2xy7DK.js";import{g as P,a as T,s as w}from"./generateUtilityClasses-7uZHDCF9.js";import{a as k}from"./radio-BH18ac4x.js";import{j as m}from"./jsx-runtime-CHAcsyq4.js";import{u as x}from"./useControlled-YZkScxzg.js";import{u as F}from"./useForkRef-DZzpmK-L.js";import{u as S}from"./useId-Dw7xLATF.js";import{F as I}from"./FormGroup-BLMNI0WR.js";import{F as G}from"./FormControlLabel-CGobVcaz.js";function _(a){return T("MuiRadioGroup",a)}P("MuiRadioGroup",["root","row","error"]);const E=a=>{const{classes:t,row:r,error:l}=a;return R({root:["root",r&&"row",l&&"error"]},_,t)},z=o.forwardRef(function(t,r){const{actions:l,children:i,className:f,defaultValue:h,name:y,onChange:n,value:b,...g}=t,s=o.useRef(null),v=E(t),[u,d]=x({controlled:b,default:h,name:"RadioGroup"});o.useImperativeHandle(l,()=>({focus:()=>{let e=s.current.querySelector("input:not(:disabled):checked");e||(e=s.current.querySelector("input:not(:disabled)")),e&&e.focus()}}),[]);const q=F(r,s),p=S(y),C=o.useMemo(()=>({name:p,onChange(e){d(e.target.value),n&&n(e,e.target.value)},value:u}),[p,n,d,u]);return m(k.Provider,{value:C,children:m(I,{role:"radiogroup",ref:q,className:V(v.root,f),...g,children:i})})}),c=w(G)`
  height: 24px;
  margin-left: -9px;
`;try{c.displayName="FormControlLabel",c.__docgenInfo={description:"",displayName:"FormControlLabel",props:{checked:{defaultValue:null,description:"If `true`, the component appears selected.",name:"checked",required:!1,type:{name:"boolean"}},classes:{defaultValue:null,description:"Override or extend the styles applied to the component.",name:"classes",required:!1,type:{name:"Partial<FormControlLabelClasses>"}},componentsProps:{defaultValue:{value:"{}"},description:"The props used for each slot inside.\n@deprecated use the `slotProps` prop instead. This prop will be removed in v7. See [Migrating from deprecated APIs](https://mui.com/material-ui/migration/migrating-from-deprecated-apis/) for more details.",name:"componentsProps",required:!1,type:{name:"{ typography?: TypographyProps; }"}},control:{defaultValue:null,description:"A control element. For instance, it can be a `Radio`, a `Switch` or a `Checkbox`.",name:"control",required:!0,type:{name:"ReactElement<unknown, any>"}},disabled:{defaultValue:null,description:"If `true`, the control is disabled.",name:"disabled",required:!1,type:{name:"boolean"}},disableTypography:{defaultValue:null,description:"If `true`, the label is rendered as it is passed without an additional typography node.",name:"disableTypography",required:!1,type:{name:"boolean"}},inputRef:{defaultValue:null,description:"Pass a ref to the `input` element.",name:"inputRef",required:!1,type:{name:"Ref<any>"}},label:{defaultValue:null,description:"A text or an element to be used in an enclosing label element.",name:"label",required:!0,type:{name:"ReactNode"}},labelPlacement:{defaultValue:{value:"'end'"},description:"The position of the label.",name:"labelPlacement",required:!1,type:{name:"enum",value:[{value:'"top"'},{value:'"bottom"'},{value:'"end"'},{value:'"start"'}]}},name:{defaultValue:null,description:"",name:"name",required:!1,type:{name:"string"}},onChange:{defaultValue:null,description:"Callback fired when the state is changed.\n@param event The event source of the callback.\nYou can pull out the new checked state by accessing `event.target.checked` (boolean).",name:"onChange",required:!1,type:{name:"(event: SyntheticEvent<Element, Event>, checked: boolean) => void"}},required:{defaultValue:null,description:"If `true`, the label will indicate that the `input` is required.",name:"required",required:!1,type:{name:"boolean"}},sx:{defaultValue:null,description:"The system prop that allows defining system overrides as well as additional CSS styles.",name:"sx",required:!1,type:{name:"SxProps<Theme>"}},value:{defaultValue:null,description:"The value of the component.",name:"value",required:!1,type:{name:"unknown"}},ref:{defaultValue:null,description:"",name:"ref",required:!1,type:{name:"Ref<unknown>"}},slots:{defaultValue:{value:"{}"},description:"The components used for each slot inside.",name:"slots",required:!1,type:{name:"Partial<FormControlLabelSlots>"}},slotProps:{defaultValue:{value:"{}"},description:"The props used for each slot inside.",name:"slotProps",required:!1,type:{name:'{ typography?: SlotProps<OverridableComponent<TypographyTypeMap<{}, "span">>, {}, FormControlLabelProps>; }'}},theme:{defaultValue:null,description:"",name:"theme",required:!1,type:{name:"Theme"}},as:{defaultValue:null,description:"",name:"as",required:!1,type:{name:"ElementType<any, keyof IntrinsicElements>"}}}}}catch{}export{c as F,z as R};
